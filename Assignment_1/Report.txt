Brief explanation of the various components of the makefile.

CC = gcc
Tells program, which compiler to use. Here gcc.

CCWARNINGS = -Wall -W
Asking program to address warnings in compilation process. 
Wall is activation of some default warnings, and -W is an extension with more options.

CCOPT = -std=c11 -g
C11 is just the standard for the c-language: ISO/IEC 9899:2011
-g adds debugging info to the compiled program. Makes it possible to debug with for example gdb.

CFLAGS = $(CCWARNINGS) $(CCOPT)
Just combine warning calls into CFLAGS

DEMO_SOURCES := io_demo.c io.c //list sources (files) that will be compiled.
DEMO_OBJECTS := $(DEMO_SOURCES:.c=.o) //When compiled, .o files are created to be run. 
_____________________________________________
DEMO_EXECUTABLE = io_demo
MAIN_EXECUTABLE = cmd_int
EXECS = $(DEMO_EXECUTABLE) $(MAIN_EXECUTABLE)
________: Names executable files and list them. 

.PHONY: all run-demo run test // Tells which files that are commands and should not interfere in the build process.

Rest of Makefile list executables and tells where they are placed. 

_____________________________________________
Brief explenation of how we implement I/O functions: 

We implemented the functions using the system calls read() and write(),
from the library unistd.h.
read_char() reads a single bit/char c from the terminal.
write_char() uses write() and points at the char c.
write_string() calculates the length of the string and prints it using write().
write_int() manually convert an integer to a string and then uses write().


_____________________________________________
Entering the input "abcqls" to the demo program.
before hitting the return button. 
What happens? 
When something is typed in the shell, the shell has a buffer which collect
the characters. It then sends it to the program. The read_char() in the main() loop reads those 
one at a time. So - program reads 'a' and write it back using whrite_char(). It also increments
the counter. count++. It does this with each char ("abcqls") and 'echoes' them back.
When the program reads char 'q' it stops and breaks out of the loop. 
Then it prints the counter value (write_string()) and (write_int()).

-State an input string for which such behaviour would be very unfortunate.
A long string with a 'q'. If a 'q' is present the process will stop, but still output 
preciding chars.

-Suggest how the behaviour of the demo program could be made more safe.
We could use non-blocking I/O or read a char at a time without buffering all of the input.
We could implement errorhandling.
